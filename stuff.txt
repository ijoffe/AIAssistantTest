def objectdetection_model(video_input, video_output, od_model):
    cap = cv2.VideoCapture(video_input)
    fourcc = cv2.VideoWriter_fourcc(*'XVID')
    out = cv2.VideoWriter(video_output, fourcc, 20.0, (640, 480))

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        results = od_model(frame)

        # Draw bounding boxes and labels on the frame
        for result in results:
            boxes = result.boxes.xyxy
            for box in boxes:
                x1, y1, x2, y2 = map(int, box[:4])
                cv2.rectangle(frame, (x1, y1), (x2, y2), (255, 0, 0), 2)

        out.write(frame)  # Write the frame to the output video

    cap.release()
    out.release()
    return




def main():
    video_input = "/dev/video1"  # Input device
    video_output = "/dev/video2"  # Output device
    # run preliminaries so application can be run
    od_model, ll_model, ll_processor = setup()
    # set up video as a separate thread
    objectdetection_t = threading.Thread(target=objectdetection_model, args=(video_input, od_model,))
    objectdetection_t.start()
    # run language modelling on the main thread for website communication
    largelanguage_model(video_input, ll_model, ll_processor)
    return

if __name__ == "__main__":
    main()

# sudo modprobe v4l2loopback devices=1 video_nr=1 card_label="VirtualCam"
#gst-launch-1.0 thetauvcsrc mode=4K ! h264parse ! avdec_h264 ! videoconvert ! v4l2sink device=/dev/video1


# try to run
sudo apt-get install gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly


# Possible pipelines for nvidia hardware (accelrated)
gst-launch-1.0 thetauvcsrc mode=4K ! queue ! h264parse ! nvh264dec ! queue ! nvvidconv ! queue ! v4l2sink device=/dev/video1



```
Robert Vogel (Dolby.io Support)

Jul 24, 2024, 12:17 PDT

Hello Mehmood,
 
The error is Whip Sink is not installed.
 
Let see if this helps install the GStreamer Plugin for WHIP.
 
sudo apt install gstreamer1.0-x libgstreamer1.0-dev libgstreamer
-plugins-base1.0-dev gstreamer1.0-plugins-bad libgstreamer-plugins-bad1.0-dev libsoup2.4-dev libjson-glib-dev libnice-dev autoconf libtool gtk-doc-tools libglib2.0-dev gstreamer1.0-nice libssl-dev libreadline-dev gstreamer1.0-plugins-ugly libsrtp0-dev libsrtp2-dev
 
Let's check if it is available.
 
gst-inspect-1.0 webrtchttp
 
If it does show WHIP/WHEP

gst-launch-1.0 videotestsrc ! videoconvert ! x264enc bitrate=2500 ! rtph264pay ! 'application/x-rtp,media=video,encoding-name=H264,payload=97,clock-rate=90000' ! whip.sink_0 audiotestsrc wave=sine ! audioconvert ! opusenc ! rtpopuspay ! 'application/x-rtp,media=audio,encoding-name=OPUS,payload=96,clock-rate=48000,encoding-params=(string)2' ! whip.sink_1 whipsink name=whip auth-token="d1329ff661d55a66ce818ef0f7e74c02d295f67c1117f87bd50e0c5b5fdfcaee" whip-endpoint="https://director.millicast.com/api/whip/AIAssistantWebStream" --gst-debug-level=3
 
Regards,
 
Robert```



gst-launch-1.0 thetauvcsrc mode=4K ! 'video/x-h264, width=3840, height=2160, framerate=30/1' ! queue ! h264parse ! nvv4l2decoder ! queue ! nvvidconv ! 'video/x-raw, format=(string)I420' ! queue ! v4l2sink device=/dev/video1




The error message indicates an issue with the plugin loading and the negotiation of capabilities. Here are some steps to troubleshoot and resolve the issues:

1. **Verify Plugin Installation**: Ensure that all necessary GStreamer plugins are installed, especially the ones related to your source (`thetauvcsrc`).

2. **Set GST_PLUGIN_PATH**: Sometimes, setting the `GST_PLUGIN_PATH` environment variable to the directory containing the GStreamer plugins can help. You can set it using:
   ```sh
   export GST_PLUGIN_PATH=/usr/lib/aarch64-linux-gnu/gstreamer-1.0
   ```

3. **Check thetauvcsrc Configuration**: Ensure that `thetauvcsrc` is properly configured and recognized by GStreamer. Verify if the plugin is correctly installed and recognized by running:
   ```sh
   gst-inspect-1.0 thetauvcsrc
   ```

4. **Debug Caps Negotiation**: Use `capsfilter` to enforce capabilities negotiation. This might help to narrow down the issue.

5. **GStreamer Debugging**: Enable GStreamer debugging to get more detailed logs:
   ```sh
   GST_DEBUG=4 gst-launch-1.0 thetauvcsrc mode=4K ! 'video/x-h264, width=3840, height=2160, framerate=30/1' ! queue ! h264parse ! nvv4l2decoder ! queue ! nvvidconv ! 'video/x-raw, format=(string)I420' ! queue ! v4l2sink device=/dev/video1
   ```

6. **Alternative Pipeline Test**: Test with a simpler pipeline to isolate the problem. For example, try capturing directly to a file to see if the source is working correctly:
   ```sh
   gst-launch-1.0 thetauvcsrc mode=4K ! 'video/x-h264, width=3840, height=2160, framerate=30/1' ! queue ! h264parse ! qtmux ! filesink location=output.mp4
   ```

If the simplified pipeline works, it indicates the issue might be with the downstream elements. If it fails, the problem is likely with the source or the plugin setup.